//
//  UserInteractor.swift
//  VipArchitectureDemo
//
//  Created by Sivaramaiah NAKKA on 18/07/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// view to interactor
protocol UserBusinessLogic {
    func viewDidLoad()
}

protocol UserDataStore {
    var userResponse: User.Fetch.Response? { get set }
}

class UserInteractor: UserDataStore {
    
    // MARK: - Public Variables
    
    var presenter: UserPresentationLogic?
    var worker: UserNetworkingWorker?
    var userResponse: User.Fetch.Response?
    
    // MARK: - Private Variables
    
    private let group = DispatchGroup()
}

extension UserInteractor: UserBusinessLogic {
    func viewDidLoad() {
        presenter?.showLoader()
        getUsersList()
        group.notify(queue: .main) { [weak self] in
            guard let self = self else { return }
            
            self.presenter?.hideLoader()
            
            guard let users = self.userResponse else { return }
            
            if let error = self.userResponse?.error {
                self.presenter?.showError(error)
            }
            
            self.presenter?.showUsers(with: users)
        }
    }
}


// MARK: - Private Functions
private extension UserInteractor {
    func getUsersList() {
        worker = UserNetworkingWorker()
        group.enter()
        worker?.getUsers { [weak self] result in
            defer { self?.group.leave() }
            switch result {
            case let .success(users):
                self?.userResponse = User.Fetch.Response(users: users)
            case let .failure(error):
                self?.userResponse = User.Fetch.Response(error: error)
            }
        }
    }
}
