//
//  UserViewController.swift
//  VipArchitectureDemo
//
//  Created by Sivaramaiah NAKKA on 18/07/23.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

// presentor to view
protocol UserDisplayLogic: AnyObject {
    func reloadTableViewData(with userViewModel: User.Fetch.ViewModel)
    func showError(_ error: Error)
    func showLoader()
    func hideLoader()
}

class UserViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableView: UITableView!

    // MARK: - public variables
    var interactor: UserBusinessLogic?
    var router: (NSObjectProtocol & UserRoutingLogic & UserDataPassing)?
    
    
    // MARK: - private variables
    private var users: [UserViewModel] = []
    
    // MARK: - Object lifecycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = UserInteractor()
        let presenter = UserPresenter()
        let router = UserRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        interactor?.viewDidLoad()
    }
}

// MARK: - IBActions
extension UserViewController {
    
}

// MARK: - Public Functions
extension UserViewController {
    
}

// MARK: - Private Functions
private extension UserViewController {
    func setupUI() {
        self.tableView.dataSource = self
        self.tableView.delegate = self
    }
}

// MARK: - UITableViewDataSource
extension UserViewController: UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.users.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = UITableViewCell()
        cell.textLabel?.text = self.users[indexPath.row].name
        cell.detailTextLabel?.text = self.users[indexPath.row].website
        return cell
    }
}

// MARK: - UITableViewDelegate
extension UserViewController: UITableViewDelegate {
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}

// MARK: - UserDisplayLogic (Presentor to View)
extension UserViewController: UserDisplayLogic {
    func reloadTableViewData(with userViewModel: User.Fetch.ViewModel) {
        self.users = userViewModel.users
        self.tableView.reloadData()
    }

    func showError(_ error: Error) {
        
    }
    
    func showLoader() {
        
    }
    
    func hideLoader() {
        
    }
    
}
